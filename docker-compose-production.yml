version: "3.8"

services:
    # -------------------------------------------
    # Core Infrastructure
    # -------------------------------------------

    zookeeper:
        image: confluentinc/cp-zookeeper:7.6.1
        container_name: zookeeper
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        ports:
            - "2181:2181"
        volumes:
            - zookeeper_data:/var/lib/zookeeper/data
            - zookeeper_log:/var/lib/zookeeper/log
        networks: [flead_network]

    kafka:
        image: confluentinc/cp-kafka:7.6.1
        container_name: kafka
        depends_on: [zookeeper]
        ports:
            - "9092:9092"
            - "29092:29092"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://host.docker.internal:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
        volumes:
            - kafka_data:/var/lib/kafka/data
        networks: [flead_network]

    # -------------------------------------------
    # Storage and Visualization
    # -------------------------------------------

    timescaledb:
        image: timescale/timescaledb-ha:pg16
        container_name: timescaledb
        ports:
            - "5432:5432"
        environment:
            POSTGRES_PASSWORD: password
            POSTGRES_DB: flead
            POSTGRES_USER: flead
        volumes:
        #             - ./sql/timescale_init.sql/init.sql:/docker-entrypoint-initdb.d/init.sql

            - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
            - timescaledb_data:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U flead -d flead -h localhost"]
            interval: 5s
            timeout: 10s
            retries: 20
            start_period: 30s
        networks: [flead_network]

    grafana:
        image: grafana/grafana:11.0.0
        container_name: grafana
        ports:
            - "3001:3000"
        environment:
            GF_SECURITY_ADMIN_USER: admin
            GF_SECURITY_ADMIN_PASSWORD: admin
        volumes:
            - ./grafana/provisioning:/etc/grafana/provisioning
            - ./grafana/dashboards:/var/lib/grafana/dashboards
        depends_on:
            timescaledb: { condition: service_healthy }
        networks: [flead_network]

volumes:
    zookeeper_data:
    zookeeper_log:
    kafka_data:
    timescaledb_data:

networks:
    flead_network:
        driver: bridge
