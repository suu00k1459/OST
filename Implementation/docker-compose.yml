# Define the project name explicitly to avoid warnings and ensure consistent naming.
name: flead_project

# This is the main blueprint for our entire application.
services:

  # -------------------------------------------
  # Core Infrastructure
  # -------------------------------------------

  # Kafka in KRaft mode (no Zookeeper). This is the central message bus.
  kafka:
    image: apache/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      # [FIX] Increased memory allocation to prevent startup failures.
      KAFKA_HEAP_OPTS: "-Xms1g -Xmx1536m"
      KAFKA_CLUSTER_ID: "fleadClusterId_0123456789ab"
      # [FIX] Added additional KRaft stability configurations
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    healthcheck:
      # [FIX] Made healthcheck more robust: uses internal listener and gives Kafka more time to start (120s).
      test: ["CMD-SHELL", "bash -c '/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server kafka:29092 >/dev/null 2>&1'"]
      interval: 20s
      timeout: 15s
      retries: 15
      start_period: 30s
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks: [flead_network]
    restart: unless-stopped

  # [FIX] Corrected the command syntax for this helper service.
  # This job runs once to create all necessary Kafka topics before any applications start.
  kafka-init:
    image: apache/kafka:latest
    container_name: kafka-init
    depends_on:
      kafka: { condition: service_healthy }
    # Use bash -c to correctly execute the multi-line string.
    command: >
      bash -c "
      set -e;
      echo 'Waiting for Kafka broker to be ready...';
      until /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:29092 --list; do
        >&2 echo 'Kafka is unavailable - sleeping';
        sleep 2;
      done;
      echo 'Creating Kafka topics if not present...';
      /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:29092 --topic edge_data_client1 --partitions 3 --replication-factor 1;
      /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:29092 --topic edge_data_client2 --partitions 3 --replication-factor 1;
      /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:29092 --topic model_updates     --partitions 3 --replication-factor 1;
      /opt/kafka/bin/kafka-topics.sh --create --if-not-exists --bootstrap-server kafka:29092 --topic global_model      --partitions 1 --replication-factor 1;
      echo 'Kafka topics ready.';
      "
    networks: [flead_network]
    restart: "no"

  # Kafka UI for inspecting topics and messages.
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-cluster-ui
    ports:
      - "8082:8080" # UI is available at http://localhost:8082
    environment:
      KAFKA_CLUSTERS_0_NAME: FleadCluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    depends_on:
      kafka: { condition: service_healthy }
    networks: [flead_network]
    restart: unless-stopped

  # Jupyter Notebook for interactive development.
  jupyter-notebook:
    image: jupyter/base-notebook:latest
    container_name: jupyter-notebook
    ports:
      - "8888:8888" # UI is available at http://localhost:8888
    volumes:
      - ./notebooks:/home/jovyan/work
    environment:
      - JUPYTER_TOKEN=token
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    command: start-notebook.sh --NotebookApp.token='token' --NotebookApp.ip='0.0.0.0' --NotebookApp.allow_origin='*'
    depends_on:
      kafka: { condition: service_healthy }
    networks: [flead_network]
    restart: unless-stopped

  # -------------------------------------------
  # Flink & Spark Processing Engines
  # -------------------------------------------
  flink-jobmanager:
    image: apache/flink:1.17-scala_2.12
    container_name: flink-jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    networks: [flead_network]
    restart: unless-stopped

  flink-taskmanager:
    image: apache/flink:1.17-scala_2.12
    container_name: flink-taskmanager
    depends_on: [flink-jobmanager]
    command: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    networks: [flead_network]
    restart: unless-stopped

  spark-master:
    image: apache/spark:3.5.1
    container_name: spark-master
    ports:
      - "8088:8080"
      - "7077:7077"
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.master.Master
    networks: [flead_network]
    restart: unless-stopped

  spark-worker:
    image: apache/spark:3.5.1
    container_name: spark-worker
    depends_on: [spark-master]
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    networks: [flead_network]
    restart: unless-stopped

  # -------------------------------------------
  # Application Services
  # -------------------------------------------
  server:
    build:
      context: .
      dockerfile: services/server/Dockerfile
    container_name: server
    depends_on:
      kafka: { condition: service_healthy }
      kafka-init: { condition: service_completed_successfully }
      timescaledb: { condition: service_healthy }
    ports:
      - "8080:8080"
    environment:
      KAFKA_BOOTSTRAP: kafka:29092
      TOPIC_UPDATES: model_updates
      TOPIC_GLOBAL: global_model
      DB_DSN: postgresql://flead:password@timescaledb:5432/flead
    networks: [flead_network]
    restart: on-failure

  client1:
    build: { context: ., dockerfile: services/client/Dockerfile }
    container_name: client1
    depends_on:
      server: { condition: service_started }
      kafka-init: { condition: service_completed_successfully }
    environment:
      CLIENT_ID: client1
      KAFKA_BOOTSTRAP: kafka:29092
      TOPIC_DATA: edge_data_client1
      SERVER_ADDR: server:8080
      TASK_MODE: binary
    networks: [flead_network]
    restart: on-failure

  client2:
    build: { context: ., dockerfile: services/client/Dockerfile }
    container_name: client2
    depends_on:
      server: { condition: service_started }
      kafka-init: { condition: service_completed_successfully }
    environment:
      CLIENT_ID: client2
      KAFKA_BOOTSTRAP: kafka:29092
      TOPIC_DATA: edge_data_client2
      SERVER_ADDR: server:8080
      TASK_MODE: binary
    networks: [flead_network]
    restart: on-failure

  producer:
    build: { context: ., dockerfile: services/producer/Dockerfile }
    container_name: producer
    depends_on:
      kafka: { condition: service_healthy }
      kafka-init: { condition: service_completed_successfully }
    environment:
      KAFKA_BOOTSTRAP: kafka:29092
      TOPICS: edge_data_client1,edge_data_client2
      CSV_PATH: /data/DNN-EdgeIIoT-dataset.csv
    volumes:
      - ./data:/data
    networks: [flead_network]
    restart: on-failure

  # -------------------------------------------
  # Storage and Visualization
  # -------------------------------------------
  timescaledb:
    image: timescale/timescaledb-ha:pg16
    container_name: timescaledb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: flead
      POSTGRES_USER: flead
    volumes:
      - ./sql/timescale_init.sql:/docker-entrypoint-initdb.d/init.sql
      - timescaledb_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flead -d flead"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    networks: [flead_network]
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.0.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      timescaledb: { condition: service_healthy }
    networks: [flead_network]
    restart: unless-stopped

# Define named volumes to persist data.
volumes:
  kafka_data:
  timescaledb_data:

# Define the custom bridge network.
networks:
  flead_network:
    driver: bridge