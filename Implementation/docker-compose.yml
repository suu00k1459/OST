# Final version using the official apache/spark image to resolve network pull errors.
services:
  # -------------------------------------------
  # Core Infrastructure
  # -------------------------------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka
    depends_on: [zookeeper]
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data

  # -------------------------------------------
  # Flink Cluster
  # -------------------------------------------
  flink-jobmanager:
    image: apache/flink:1.17-scala_2.12
    container_name: flink-jobmanager
    ports:
      - "8081:8081" # Flink UI
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager

  flink-taskmanager:
    image: apache/flink:1.17-scala_2.12
    container_name: flink-taskmanager
    depends_on: [flink-jobmanager]
    command: taskmanager
    scale: 1
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager

  # -------------------------------------------
  # Spark Cluster (Using Official Apache Image)
  # -------------------------------------------
  spark-master:
    image: apache/spark:3.5.1
    container_name: spark-master
    ports:
      - "8088:8080" # Spark Master UI
      - "7077:7077"
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.master.Master

  spark-worker:
    image: apache/spark:3.5.1
    container_name: spark-worker
    depends_on: [spark-master]
    command: /opt/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077

  # -------------------------------------------
  # Application Services
  # -------------------------------------------
  server:
    build:
      context: .
      dockerfile: services/server/Dockerfile
    container_name: server
    depends_on:
      kafka:
        condition: service_started
      timescaledb:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_BOOTSTRAP: kafka:29092
      TOPIC_UPDATES: model_updates
      TOPIC_GLOBAL: global_model
      DB_DSN: postgresql://flead:password@timescaledb:5432/flead

  client1:
    build:
      context: .
      dockerfile: services/client/Dockerfile
    container_name: client1
    depends_on: [server]
    environment:
      CLIENT_ID: client1
      KAFKA_BOOTSTRAP: kafka:29092
      TOPIC_DATA: edge_data_client1
      SERVER_ADDR: server:8080
      TASK_MODE: binary

  client2:
    build:
      context: .
      dockerfile: services/client/Dockerfile
    container_name: client2
    depends_on: [server]
    environment:
      CLIENT_ID: client2
      KAFKA_BOOTSTRAP: kafka:29092
      TOPIC_DATA: edge_data_client2
      SERVER_ADDR: server:8080
      TASK_MODE: binary

  producer:
    build:
      context: .
      dockerfile: services/producer/Dockerfile
    container_name: producer
    depends_on: [kafka]
    environment:
      KAFKA_BOOTSTRAP: kafka:29092
      TOPICS: edge_data_client1,edge_data_client2
      CSV_PATH: /data/DNN-EdgeIIoT-dataset.csv
    volumes:
      - ./data:/data

  # -------------------------------------------
  # Storage and Visualization
  # -------------------------------------------
  timescaledb:
    image: timescale/timescaledb-ha:pg16
    container_name: timescaledb
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_DB: flead
      POSTGRES_USER: flead
    volumes:
      - ./sql/timescale_init.sql:/docker-entrypoint-initdb.d/init.sql
      - timescaledb_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U flead -d flead"]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana:11.0.0
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      timescaledb:
        condition: service_healthy

# Define named volumes for data persistence
volumes:
  zookeeper_data:
  zookeeper_log:
  kafka_data:
  timescaledb_data: